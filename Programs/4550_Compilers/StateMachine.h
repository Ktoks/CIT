#pragma once
#include "Token.h"


enum MachineState {
	START_STATE, IDENTIFIER_STATE, INTEGER_STATE, PLUS_STATE, MINUS_STATE, TIMES_STATE, DIVIDE_STATE, MOD_STATE, ISEQUAL_STATE, 
	LESSTHAN_STATE, GREATERTHAN_STATE, LESSEQ_STATE, GREATEREQ_STATE, GREATER_STATE, ASSIGNMENT_STATE, CANTMOVE_STATE,
	INSERTION_STATE, END_STATE, LINECOMMENT_STATE, BLOCKCOMMENT_STATE, LEFTPAREN_STATE, RIGHTPAREN_STATE,
	LEFTBRACKET_STATE, RIGHTBRACKET_STATE, SEMICOLON_STATE, AND_STATE, OR_STATE, CHALFWAY_STATE, OHALFWAY_STATE, AHALFWAY_STATE, 
	EXPONENT_STATE, PLUSEQUAL_STATE, MINUSEQUAL_STATE, TIMESEQUAL_STATE, DIVIDEEQUAL_STATE, SHIFT_STATE, ENDL_STATE, LAST_STATE
};

enum CharacterType {
	LETTER_CHAR, DIGIT_CHAR, WHITESPACE_CHAR, PLUS_CHAR, MINUS_CHAR, TIMES_CHAR, 
	DIVIDE_CHAR, MOD_CHAR, SEMICOLON_CHAR, LESS_CHAR, GREATER_CHAR, LEFTPAREN_CHAR, 
	RIGHTPAREN_CHAR, LEFTBRACKET_CHAR, RIGHTBRACKET_CHAR, EQUAL_CHAR,
	BAD_CHAR, ENDFILE_CHAR, RETURN_CHAR, AND_CHAR, OR_CHAR, LAST_CHAR
};


class StateMachineClass
{
public:
	StateMachineClass();
	MachineState UpdateState(char currentCharacter, TokenType &
		correspondingTokenType);

private:
	MachineState mCurrentState;
	// The matrix of legal moves:
	MachineState mLegalMoves[LAST_STATE][LAST_CHAR];

	// Which end-machine-states correspond to which token types.
	// (non end states correspond to the BAD_TOKEN token type)
	TokenType mCorrespondingTokenTypes[LAST_STATE];

};